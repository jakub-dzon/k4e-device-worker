// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/project-flotta/flotta-device-worker/internal/workload/podman (interfaces: Podman)

// Package podman is a generated GoMock package.
package podman

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service "github.com/project-flotta/flotta-device-worker/internal/service"
	api "github.com/project-flotta/flotta-device-worker/internal/workload/api"
)

// MockPodman is a mock of Podman interface.
type MockPodman struct {
	ctrl     *gomock.Controller
	recorder *MockPodmanMockRecorder
}

// MockPodmanMockRecorder is the mock recorder for MockPodman.
type MockPodmanMockRecorder struct {
	mock *MockPodman
}

// NewMockPodman creates a new mock instance.
func NewMockPodman(ctrl *gomock.Controller) *MockPodman {
	mock := &MockPodman{ctrl: ctrl}
	mock.recorder = &MockPodmanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodman) EXPECT() *MockPodmanMockRecorder {
	return m.recorder
}

// CreateSecret mocks base method.
func (m *MockPodman) CreateSecret(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockPodmanMockRecorder) CreateSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockPodman)(nil).CreateSecret), arg0, arg1)
}

// Exists mocks base method.
func (m *MockPodman) Exists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockPodmanMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockPodman)(nil).Exists), arg0)
}

// GenerateSystemdService mocks base method.
func (m *MockPodman) GenerateSystemdService(arg0 string, arg1 uint) (service.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSystemdService", arg0, arg1)
	ret0, _ := ret[0].(service.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSystemdService indicates an expected call of GenerateSystemdService.
func (mr *MockPodmanMockRecorder) GenerateSystemdService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSystemdService", reflect.TypeOf((*MockPodman)(nil).GenerateSystemdService), arg0, arg1)
}

// List mocks base method.
func (m *MockPodman) List() ([]api.WorkloadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]api.WorkloadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPodmanMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPodman)(nil).List))
}

// ListSecrets mocks base method.
func (m *MockPodman) ListSecrets() (map[string]struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets")
	ret0, _ := ret[0].(map[string]struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockPodmanMockRecorder) ListSecrets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockPodman)(nil).ListSecrets))
}

// Logs mocks base method.
func (m *MockPodman) Logs(arg0 string, arg1 io.Writer) (context.CancelFunc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs", arg0, arg1)
	ret0, _ := ret[0].(context.CancelFunc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logs indicates an expected call of Logs.
func (mr *MockPodmanMockRecorder) Logs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockPodman)(nil).Logs), arg0, arg1)
}

// Remove mocks base method.
func (m *MockPodman) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockPodmanMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPodman)(nil).Remove), arg0)
}

// RemoveSecret mocks base method.
func (m *MockPodman) RemoveSecret(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSecret", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSecret indicates an expected call of RemoveSecret.
func (mr *MockPodmanMockRecorder) RemoveSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSecret", reflect.TypeOf((*MockPodman)(nil).RemoveSecret), arg0)
}

// Run mocks base method.
func (m *MockPodman) Run(arg0, arg1 string) ([]*PodReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].([]*PodReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockPodmanMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockPodman)(nil).Run), arg0, arg1)
}

// Start mocks base method.
func (m *MockPodman) Start(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockPodmanMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPodman)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockPodman) Stop(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockPodmanMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPodman)(nil).Stop), arg0)
}

// UpdateSecret mocks base method.
func (m *MockPodman) UpdateSecret(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockPodmanMockRecorder) UpdateSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockPodman)(nil).UpdateSecret), arg0, arg1)
}
